- hosts: all
  name: prep systems
  become: yes
  vars:
    skip_updates: false
    skip_utilities: false

  tasks:
    - name: set timezone
      community.general.timezone:
        name: "{{ timezone }}"

    - name: register with Red Hat
      community.general.redhat_subscription:
        state: present
        username: "{{ rh_username }}"
        password: "{{ rh_password }}"
        auto_attach: true

    - name: upgrade all packages
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: not skip_updates
      tags:
        - packages

    - name: install some packages
      ansible.builtin.dnf:
        name:
          - vim
          - git
          - mc
        state: present
      when: not skip_utilities

    - name: pre-configure controller nodes
      block:
      - name: attach to correct repos
        community.general.rhsm_repository:
          state: enabled
          name: ansible-automation-platform-2.0-early-access-for-rhel-8-x86_64-rpms
        tags:
          - repos

      - name: prepping controller nodes
        ansible.builtin.dnf:
          name: ansible
          state: present
        when: "'controllers' in group_names"
      when: "'lb' not in group_names"

    - name: pre-configure load balancer
      block:
      - name: installing haproxy
        ansible.builtin.dnf:
          name: haproxy
          state: present

      - name: starting haproxy
        ansible.builtin.service:
          name: haproxy
          state: started
          enabled: yes
      when: "'lb' in group_names"

    - name: ssh key juggling
      block:
      - name: generate temporary ssh key
        community.crypto.openssh_keypair:
          path: /home/cloud-user/.ssh/id_rsa
        when: (inventory_hostname == hostvars[groups['controllers'][0]]['ansible_fqdn']) or
              (ansible_fqdn == hostvars[groups['controllers'][0]]['ansible_fqdn'])

      - name: read newly generated public key
        ansible.builtin.slurp:
          src: /home/cloud-user/.ssh/id_rsa.pub
        when: (inventory_hostname == hostvars[groups['controllers'][0]]['ansible_fqdn']) or
              (ansible_fqdn == hostvars[groups['controllers'][0]]['ansible_fqdn'])
        register: pubkey

      - name: send pubkey to all nodes
        ansible.posix.authorized_key:
          key: "{{ hostvars[groups['controllers'][0]]['pubkey']['content'] | b64decode }}"
          comment: "cloud-user@{{ hostvars[groups['controllers'][0]]['ansible_fqdn'] }}"
          state: present
          user: cloud-user
      remote_user: cloud-user
      become: no
